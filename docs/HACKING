
=============================
Hacking the Cups Fab Backends
=============================

:author: Brandon Edens
:date: 2010-02-25

.. contents:: Table of Contents
.. sectnum::


Software Design and Layout
==========================

Basic software consists of backend scripts which live in::

  cups_fab/bin/

and the python module which lives in::

  cups_fab/cups_fab/

Some of the major pieces of software in the cups_fab module are:
  * job.py - holds logic related to cups jobs
  * config.py - generic configuration for software
  * log.py - functions for logging to cups
  * device.py - printing device classes
  * pstoedit.py - execution of pstoedit program
  * utils.py - some generic utility functions.


Manual Execution of Backend(s)
==============================

Assuming we're going to manually execute the vinyl-cutter backend with our
currently working directory being ./cups_fab/

Attempting to execute the driver script involves something like::

  export DEVICE_URI='vinyl-cutter://ttyUSB0/'
  export PRINTER='vinyl-cutter'
  ./bin/vinyl-cutter 123 jdoe test 1 none ~/test.ps

Manual laser cutter
-------------------

Here's some commands for manually running the laser cutter::

  export DEVICE_URI='laser-cutter://localhost/rp=100/rs=100/vp=100/vs=10/vf=5000/rm=grey'
  export PRINTER='laser-cutter'
  ./bin/laser-cutter 123 jdoe test 1 options < ~/test.ps

Capturing job sent to the manual laser cutter
---------------------------------------------

You can use netcat the TCP/IP swiss army knife to capture incoming cups
jobs. Try doing something like::

  nc -k -l localhost 6001

to capture network traffic coming to the printer.


Cups Log Messages
=================

Cups logging messages both displayed as information and errors are described
here: http://www.cups.org/documentation.php/api-filter.html#MESSAGES

In Python that means that your log messages need to be sent via stderr with the
proper preface to each message. As in::

  sys.stderr.write("INFO: I am trying to raster!\n")
  sys.stderr.crit("CRIT: I tried to foo but broke!\n")

To that end cups_fab provides a log.py file that can be used to emit the proper
messages. So to emit info messages to be displayed for information use::

  log.info("Hello world")

To display error messages try::

  log.crit("Could not open file %s." % filename)

You can view these log messages by looking at the filename::

  /var/log/cups/error_log

To get reasonable logging you might need to increase cups log level. You can do
that by modifying the configuration value LogLevel in::

  /etc/cups/cups.conf


Cups Security
=============

As it turns out, cups creates temporary files in /var/spool/cups with creation
mask of 0700 and a user:group of root:lp under Ubuntu. This means that if our
backend process is running as any user other than root then we will not be able
to open the file that contains the job to print.

Cups will invoke our backend as user root only if that backend executable has
permissions of 0700. Otherwise cups will execute our backend as something like
the "lp" user in Ubuntu. This is less than desireable if the job to print is
being provided by a filename rather than stdin which does happen if a OSX Tiger
machine using Inkscape attempts to print. Therefore, make sure that the backend
executable has permissions 0700 or maybe even 0500.

See: http://www.cups.org/documentation.php/api-filter.html#SECURITY for more
information.


Inkscape Bugs
=============

For some crazy reason Inkscape has decided to mangle the notion of pages sent
in Portrait or Landscape mode. What this means is that Inkscape documents that
have a width larger than a height are considered to be Landscape. Jobs that
have a height larger than a width are considered to be Portrait. When the jobs
are transmitted to cups Inkscape does not properly alert Cups to what mode the
document is in; instead telling cups that the document is Portrait
(PageOrientation: 0) which is clearly incorrect. This is a serious problem
because documents will be sent to cups that no longer have the correct
width/height.

For our laser cutter with bed size 24x12 the jobs come in with height 24in and
width 12in.

There are two ways of working around this. The first is jobs sent to a vinyl
cutter need to make sure that the define a height that is greater than the
width. This makes sense in that vinyl rolls are usually always longer than they
are wider and most users will do this by default.

The other work around is to define an accepted page size in our driver then
when spotting documents submitted with that size rotated, to unrotate the page
via postscript. Our drivers attempt to do this but it must be known that
documents that are sent to our driver without the correct page size will not be
properly adjusted back to the right orientation.

Obviously it'd be great if we could spot pages orientated into landscape mode
then convert them back to Portrait. This just isn't possible at this time.


Another alternative approach to fixing the Inkscape bug
-------------------------------------------------------

Modifying a postscript file to correct for the inkscape bug requires two
changes. First you need to set the %%DocumentMedia to the correct width
height. In our case document media is changed from::

  %%DocumentMedia: plain 1728 864 0 () ()

to::

  %%DocumentMedia: plain 864 1728 0 () ()

Then you have to rotate the entire page by inserting the following postscript
after the %%PageBoundingBox directive which should be something like::

  /setpagedevice{pop}def
  -90 rotate -864 0 translate

It is unsure if this fully works at this time as the width/height is also set
in numerous other locations.



CUPS Avahi Bugs
===============

CUPS v1.4+ has known broken compatability with Avahi the free software
implementation of Zeroconf that is utilized by many distributions. This can be
read about at https://bugs.launchpad.net/ubuntu/+source/cups/+bug/465916
specifically
https://bugs.launchpad.net/ubuntu/+source/cups/+bug/465916/comments/15 .

As it turns out: Apple has been adding functionality to their Zeroconf
implementation while also modifying Cups to take advantage of this
functionality specifically the usage of functionality related to
kDNSServiceFlagsShareConnection.

An inspection of the git repository as of 2010-03-01 reveals that Avahi has yet
to implement the needed functionality.

